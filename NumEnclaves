class Solution {
    public int numEnclaves(int[][] board) {
        int n = board.length;
        int m = board[0].length;
        boolean vis[][]=new boolean[board.length][board[0].length];
        for (int i = 0; i < n; i++) {
            if (board[i][0] == 1) dfs(i, 0, board, vis);
            if (board[i][m - 1] == 1) dfs(i, m - 1, board, vis);
        }

        // Top and Bottom Borders
        for (int j = 0; j < m; j++) {
            if (board[0][j] == 1) dfs(0, j, board, vis);
            if (board[n - 1][j] == 1) dfs(n - 1, j, board, vis);
        }
        int count=0;
        for(int i=0;i<board.length;i++)
        {
            for(int j=0;j<board[0].length;j++)
            {
                if(vis[i][j]==false && board[i][j]==1)
                {
                    count++;
                }
            }
        }
        return count;
    }
    public void dfs(int i,int j,int board[][], boolean visited[][])
    {
        if(i<0 || j<0 || i>(board.length-1) || j>(board[0].length-1) || visited[i][j]==true) return ;
        visited[i][j]=true;
        int dir[][]={{0,1},{1,0},{-1,0},{0,-1}};
        for(int d[]:dir)
        {
            int ni=d[0]+i;
            int nj=d[1]+j;
            if(ni>=0 && nj>=0 && ni<board.length && nj<board[0].length && board[ni][nj]==1 && !visited[ni][nj])
            {
                dfs(ni,nj,board,visited);
            }
        }
        return ;
    }
}